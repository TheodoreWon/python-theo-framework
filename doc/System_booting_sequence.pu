@startuml booting sequence
hide footbox

participant main
activate main

create participant System
main -> System: import System

main -> System: register_component(component, constructor)
note right: register components continuously
main -> System: startup_components()
activate System

create collections Component
System -> Component: Component(system, name)
note right: new components continuously
activate Component
Component -> Component: set_related_components()
note right
    Component should have this function.
    component set components what are obligation to work.
end note

activate Component
deactivate Component
deactivate Component

System -> Component: check_connected(components)
note right
    call check_connected() continuously
    System calls with the component list to check.
end note

System -> Component: initial()
note right
    call initial() continuously
end note

activate Component
Component -> System: register_interface(component, interface)
deactivate Component
note left
    register interfaces continuously
end note

deactivate System

main -> System: start_admin_prompt()
activate System

create participant Prompt
System -> Prompt: Prompt()

create control cmdloop
System -> cmdloop

loop
    actor admin
    admin -> cmdloop: command
    activate cmdloop

    cmdloop -->> System: execute_interface(component, interface)
    System -> Component: func()
    activate Component
    Component ->> System: result
    deactivate Component

    System -->> cmdloop: result
    deactivate cmdloop
    end

admin -> cmdloop: exit
activate cmdloop
cmdloop -->> System: exit
deactivate cmdloop

deactivate System
deactivate main

@enduml
